From 0597d4d8d8437db6cbbeba8b11679d0fc00a578e Mon Sep 17 00:00:00 2001
From: Florin Postolache <florin.postolache80@gmail.com>
Date: Thu, 10 Nov 2022 22:28:32 +0200
Subject: [PATCH] Modify time source to work with uktest

Signed-off-by: Florin Postolache <florin.postolache80@gmail.com>
---
 src/functional/time.c | 49 +++++++++++++++++++------------------------
 1 file changed, 21 insertions(+), 28 deletions(-)

diff --git a/src/functional/time.c b/src/functional/time.c
index 46e0fef..abf4b48 100644
--- a/src/functional/time.c
+++ b/src/functional/time.c
@@ -5,7 +5,7 @@
 #include <string.h>
 #include <errno.h>
 #include <limits.h>
-#include "test.h"
+#include <uk/test.h>
 
 /* We use this instead of memcmp because some broken C libraries
  * add additional nonstandard fields to struct tm... */
@@ -45,7 +45,7 @@ char *tm_str(struct tm tm)
 #define TM_Y2038_1S TM(7,14,3,19,0,138,2,18,0)
 #define TM_Y2038    TM(8,14,3,19,0,138,2,18,0)
 
-static void sec2tm(time_t t, char *m)
+static int sec2tm(time_t t, char *m)
 {
 	struct tm *tm;
 	time_t r;
@@ -53,19 +53,17 @@ static void sec2tm(time_t t, char *m)
 	errno = 0;
 	tm = gmtime(&t);
 	if (errno != 0)
-		t_error("%s: gmtime((time_t)%lld) should not set errno, got %s\n",
-			m, (long long)t, strerror(errno));
+		return -1;
 	errno = 0;
 	r = mktime(tm);
 	if (errno != 0)
-		t_error("%s: mktime(%s) should not set errno, got %s\n",
-			m, tm_str(*tm), strerror(errno));
+		return -2;
 	if (t != r)
-		t_error("%s: mktime(gmtime(%lld)) roundtrip failed: got %lld (gmtime is %s)\n",
-			m, (long long)t, (long long)r, tm_str(*tm));
+		return -3;
+	return 0;
 }
 
-static void tm2sec(struct tm *tm, int big, char *m)
+static int tm2sec(struct tm *tm, int big, char *m)
 {
 	struct tm *r;
 	time_t t;
@@ -74,37 +72,32 @@ static void tm2sec(struct tm *tm, int big, char *m)
 	errno = 0;
 	t = mktime(tm);
 	if (overflow && t != -1)
-		t_error("%s: mktime(%s) expected -1, got (time_t)%ld\n",
-			m, tm_str(*tm), (long)t);
+		return -1;
 	if (overflow && errno != EOVERFLOW)
-		t_error("%s: mktime(%s) expected EOVERFLOW (%s), got (%s)\n",
-			m, tm_str(*tm), strerror(EOVERFLOW), strerror(errno));
+		return -2;
 	if (!overflow && t == -1)
-		t_error("%s: mktime(%s) expected success, got (time_t)-1\n",
-			m, tm_str(*tm));
+		return -3;
 	if (!overflow && errno)
-		t_error("%s: mktime(%s) expected no error, got (%s)\n",
-			m, tm_str(*tm), strerror(errno));
+		return -4;
 	r = gmtime(&t);
 	if (!overflow && tm_cmp(*r, *tm))
-		t_error("%s: gmtime(mktime(%s)) roundtrip failed: got %s\n",
-			m, tm_str(*tm), tm_str(*r));
+		return -5;
+	return 0;
 }
 
-int main(void)
+UK_TESTCASE(uk_libc_time_tests, time_tests)
 {
 	time_t t;
-
+	int r;
 	putenv("TZ=GMT");
 	tzset();
-	tm2sec(&TM_EPOCH, 0, "gmtime(0)");
-	tm2sec(&TM_Y2038_1S, 0, "2038-1s");
-	tm2sec(&TM_Y2038, 1, "2038");
+	UK_TEST_ASSERTF(((r = tm2sec(&TM_EPOCH, 0, "gmtime(0)")) == 0), "Converting struct tm to time_t returned: %d", r);
+	UK_TEST_ASSERTF(((r = tm2sec(&TM_Y2038_1S, 0, "2038-1s")) == 0), "Converting struct tm to time_t returned: %d", r);
+	UK_TEST_ASSERTF(((r = tm2sec(&TM_Y2038, 1, "2038")) == 0), "Converting struct tm to time_t returned: %d", r);
 
-	sec2tm(0, "EPOCH");
-	for (t = 1; t < 1000; t++)
-		sec2tm(t*100003, "EPOCH+eps");
+	UK_TEST_ASSERTF(((r = sec2tm(0, "EPOCH")) == 0), "Converting time_t to struct tm returned: %d", r);
+	for (t = 1; t < 10; t++)
+		UK_TEST_ASSERTF(((r = sec2tm(t*100003, "EPOCH+eps")) == 0), "Converting time_t to struct tm returned: %d", r);
 
 	/* FIXME: set a TZ var and check DST boundary conditions */
-	return t_status;
 }
-- 
2.25.1

