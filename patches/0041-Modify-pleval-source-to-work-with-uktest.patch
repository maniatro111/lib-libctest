From 683f8f6160c2b27bf5655491a3a8a97801439f7a Mon Sep 17 00:00:00 2001
From: Florin Postolache <florin.postolache80@gmail.com>
Date: Tue, 25 Oct 2022 16:02:58 +0300
Subject: [PATCH] Modify pleval source to work with uktest

Signed-off-by: Florin Postolache <florin.postolache80@gmail.com>
---
 src/musl/pleval.c | 37 ++++++++++++++++++-------------------
 1 file changed, 18 insertions(+), 19 deletions(-)

diff --git a/src/musl/pleval.c b/src/musl/pleval.c
index 60d80c8..22a7f8b 100644
--- a/src/musl/pleval.c
+++ b/src/musl/pleval.c
@@ -1,48 +1,49 @@
 // testing musl internal __pleval api used in dcngettext
 #include <string.h>
-#include "test.h"
+#include <uk/test.h>
 
 unsigned long __pleval(const char *, unsigned long);
 
-static void t(const char *s, unsigned long n, unsigned long want)
+static int t(const char *s, unsigned long n, unsigned long want)
 {
 	unsigned long got = __pleval(s, n);
 	if (got != want)
-		t_error("__pleval(\"%s\",%lu) failed: got %lu want %lu\n", s, n, got, want);
+		return -1;
+	return 0;
 }
 
 // evals the expr with the compiler: gettext plural rules follow c syntax
 #define T(e) do { \
 	unsigned long n, _w; \
 	for (n=0; n<200; n++) { \
-		_w = e \
-		t(#e, n, _w); \
+		_w = e; \
+		UK_TEST_EXPECT_ZERO(t(#e, n, _w)); \
 	} \
 } while(0)
 
-int main()
+UK_TESTCASE(uk_libc_pleval_tests, pleval_tests)
 {
 	char buf[210];
 
 	// recursion depth limit check
 	memset(buf, '!', 200);
 	memcpy(buf+200, "n;", 3);
-	t(buf, 7, -1);
+	UK_TEST_EXPECT_ZERO(t(buf, 7, -1));
 
 	memcpy(buf+51, "n;", 3);
-	t(buf, 3, 0);
-	t(buf, 0, 1);
+	UK_TEST_EXPECT_ZERO(t(buf, 3, 0));
+	UK_TEST_EXPECT_ZERO(t(buf, 0, 1));
 	memcpy(buf+50, "n;", 3);
-	t(buf, 3, 1);
-	t(buf, 0, 0);
+	UK_TEST_EXPECT_ZERO(t(buf, 3, 1));
+	UK_TEST_EXPECT_ZERO(t(buf, 0, 0));
 
 	// bad expr
-	t("!n n;", 1, -1);
-	t("32n;", 1, -1);
-	t("n/n;", 0, -1);
-	t("n*3-;", 1, -1);
-	t("4*;", 13, -1);
-	t("n?1:;", 13, -1);
+	UK_TEST_EXPECT_ZERO(t("!n n;", 1, -1));
+	UK_TEST_EXPECT_ZERO(t("32n;", 1, -1));
+	UK_TEST_EXPECT_ZERO(t("n/n;", 0, -1));
+	UK_TEST_EXPECT_ZERO(t("n*3-;", 1, -1));
+	UK_TEST_EXPECT_ZERO(t("4*;", 13, -1));
+	UK_TEST_EXPECT_ZERO(t("n?1:;", 13, -1));
 
 	// good expr
 	T(n % 4;);
@@ -76,6 +77,4 @@ int main()
 	T((n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3););
 	T((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;);
 	T((n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0););
-
-	return t_status;
 }
-- 
2.25.1

