From cf2f16b2705f23f55ceb1c49823fc024f34cceed Mon Sep 17 00:00:00 2001
From: Florin Postolache <florin.postolache80@gmail.com>
Date: Sun, 6 Nov 2022 15:49:53 +0200
Subject: [PATCH] Modify strptime source to work with uktest

Signed-off-by: Florin Postolache <florin.postolache80@gmail.com>
---
 src/functional/strptime.c | 56 ++++++++++++++++++++-------------------
 1 file changed, 29 insertions(+), 27 deletions(-)

diff --git a/src/functional/strptime.c b/src/functional/strptime.c
index b5f8977..571f920 100644
--- a/src/functional/strptime.c
+++ b/src/functional/strptime.c
@@ -5,7 +5,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
-#include "test.h"
+#include <uk/test.h>
 
 /**
  * checkStrptime - parse time and check if it matches expected value
@@ -14,13 +14,13 @@
  * It's because tm_wday and tm_yday may - but don't have to - be set
  * while parsing a date.
  */
-static void checkStrptime(const char *s, const char *format, const struct tm *expected) {
+static int checkStrptime(const char *s, const char *format, const struct tm *expected) {
 	struct tm tm = { };
 	const char *ret;
 
 	ret = strptime(s, format, &tm);
 	if (!ret || *ret != '\0') {
-		t_error("\"%s\": failed to parse \"%s\"\n", format, s);
+		return -1;
 	} else if (tm.tm_sec != expected->tm_sec ||
 		   tm.tm_min != expected->tm_min ||
 		   tm.tm_hour != expected->tm_hour ||
@@ -33,21 +33,23 @@ static void checkStrptime(const char *s, const char *format, const struct tm *ex
 		strftime(buf1, sizeof(buf1), "%FT%H:%M:%S%Z", expected);
 		strftime(buf2, sizeof(buf2), "%FT%H:%M:%S%Z", &tm);
 
-		t_error("\"%s\": for \"%s\" expected %s but got %s\n", format, s, buf1, buf2);
+		return -1;
 	}
+	return 0;
 }
 
-static void checkStrptimeTz(const char *s, int h, int m) {
+static int checkStrptimeTz(const char *s, int h, int m) {
 	long int expected = h * 3600 + m * 60;
 	struct tm tm = { };
 	const char *ret;
 
 	ret = strptime(s, "%z", &tm);
 	if (!ret || *ret != '\0') {
-		t_error("\"%%z\": failed to parse \"%s\"\n", s);
+		return -1;
 	} else if (tm.tm_gmtoff != expected) {
-		t_error("\"%%z\": for \"%s\" expected tm_gmtoff %ld but got %ld\n", s, tm.tm_gmtoff, expected);
+		return -1;
 	}
+	return 0;
 }
 
 static struct tm tm1 = {
@@ -86,33 +88,33 @@ static struct tm tm4 = {
 	.tm_year = 1856 - 1900,
 };
 
-int main() {
+UK_TESTCASE(uk_libc_time_tests, strptime_tests)
+{
 	setenv("TZ", "UTC0", 1);
 
 	/* Time */
-	checkStrptime("20:57:08", "%H:%M:%S", &tm1);
-	checkStrptime("20:57:8", "%R:%S", &tm1);
-	checkStrptime("20:57:08", "%T", &tm1);
+	UK_TEST_EXPECT_NOT_NULL("Parse time and check if it matches the expected value");
+	UK_TEST_EXPECT_ZERO(checkStrptime("20:57:08", "%H:%M:%S", &tm1));
+	UK_TEST_EXPECT_ZERO(checkStrptime("20:57:8", "%R:%S", &tm1));
+	UK_TEST_EXPECT_ZERO(checkStrptime("20:57:08", "%T", &tm1));
 
 	/* Format */
-	checkStrptime("20:57:08", "%H : %M  :  %S", &tm1);
-	checkStrptime("20 57  08", "%H %M %S", &tm1);
-	checkStrptime("20%57%08", "%H %% %M%%%S", &tm1);
-	checkStrptime("foo20bar57qux08      ", "foo %Hbar %M qux%S ", &tm1);
+	UK_TEST_EXPECT_ZERO(checkStrptime("20:57:08", "%H : %M  :  %S", &tm1));
+	UK_TEST_EXPECT_ZERO(checkStrptime("20 57  08", "%H %M %S", &tm1));
+	UK_TEST_EXPECT_ZERO(checkStrptime("20%57%08", "%H %% %M%%%S", &tm1));
+	UK_TEST_EXPECT_ZERO(checkStrptime("foo20bar57qux08      ", "foo %Hbar %M qux%S ", &tm1));
 
 	/* Date */
-	checkStrptime("1991-08-25", "%Y-%m-%d", &tm2);
-	checkStrptime("25.08.91", "%d.%m.%y", &tm2);
-	checkStrptime("08/25/91", "%D", &tm2);
-	checkStrptime("21.10.15", "%d.%m.%y", &tm3);
-	checkStrptime("10.7.56 in 18th", "%d.%m.%y in %C th", &tm4);
+	UK_TEST_EXPECT_ZERO(checkStrptime("1991-08-25", "%Y-%m-%d", &tm2));
+	UK_TEST_EXPECT_ZERO(checkStrptime("25.08.91", "%d.%m.%y", &tm2));
+	UK_TEST_EXPECT_ZERO(checkStrptime("08/25/91", "%D", &tm2));
+	UK_TEST_EXPECT_ZERO(checkStrptime("21.10.15", "%d.%m.%y", &tm3));
+	UK_TEST_EXPECT_ZERO(checkStrptime("10.7.56 in 18th", "%d.%m.%y in %C th", &tm4));
 
 	/* Glibc */
-	checkStrptime("1856-07-10", "%F", &tm4);
-	checkStrptime("683078400", "%s", &tm2);
-	checkStrptimeTz("+0200", 2, 0);
-	checkStrptimeTz("-0530", -5, -30);
-	checkStrptimeTz("-06", -6, 0);
-
-	return t_status;
+	UK_TEST_EXPECT_ZERO(checkStrptime("1856-07-10", "%F", &tm4));
+	UK_TEST_EXPECT_ZERO(checkStrptime("683078400", "%s", &tm2));
+	UK_TEST_EXPECT_ZERO(checkStrptimeTz("+0200", 2, 0));
+	UK_TEST_EXPECT_ZERO(checkStrptimeTz("-0530", -5, -30));
+	UK_TEST_EXPECT_ZERO(checkStrptimeTz("-06", -6, 0));
 }
-- 
2.25.1

